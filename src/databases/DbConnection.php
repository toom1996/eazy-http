<?php

namespace eazy\http\databases;

use eazy\http\ContextComponent;
use eazy\http\PDOConnection;
use Swoole\Coroutine;
use Swoole\Database\PDOConfig;
use Swoole\Database\PDOPool;
use Swoole\Database\PDOProxy;
/**
 * @property \PDO|PDOProxy $statement
 * @property bool $inTransaction
 * @property \PDO|PDOProxy $connection
 * @property string $sql
 */
class DbConnection extends ContextComponent
{
    public $host;
    public $port;
    public $dbname;
    public $charset;
    public $username;
    public $password;
    public $poolsize;


    /**
     * @var PDOPool
     */
    protected $pool;

    public function init()
    {
        $this->pool = new PDOPool((new PDOConfig())
            ->withHost($this->host)
            ->withPort($this->port)
            // ->withUnixSocket('/tmp/mysql.sock')
            ->withDbName($this->dbname)
            ->withCharset($this->charset)
            ->withUsername($this->username)
            ->withPassword($this->password)
            , 1024);
        var_dump($this->pool);
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function getConnection()
    {
        return $this->properties['connection'];
    }

    public function setConnection($val)
    {
        $this->setProperty('connection', $val);
    }

    public function close($connection = null)
    {
        $this->pool->put($connection);
    }

    public function createCommand(string $sql = '')
    {
        $this->connection = $this->pool->get();
        if ($sql) {
            $this->sql = $sql;
        }

        return $this;
    }

    public function queryAll()
    {

    }

    public function queryOne()
    {
        return $this->queryInternal();
    }

    public function query()
    {

    }

    public function beginTransaction()
    {

    }

    public function commit()
    {

    }


    public function rollback()
    {

    }

    public function getRawSql()
    {
        return $this->properties['sql'];
    }

    public function cache()
    {

    }

    public function insert()
    {

    }

    public function update()
    {

    }

    public function delete()
    {

    }

    public function getstatement()
    {
        return $this->properties['statement'];
    }

    public function setstatement($value)
    {
        $this->setProperty('statement', $value);
    }

    public function getInTransaction()
    {
        return $this->properties['inTransaction'] ?? false;
    }

    public function setInTransaction($val)
    {
        $this->setProperty('inTransaction', $val);
    }

    public function queryInternal()
    {
        try {
            $this->statement = $this->connection->prepare($this->sql);
            if (!$this->statement) {
                throw new RuntimeException('Prepare failed');
            }
            $result = $this->statement->execute();
            if (!$result) {
                throw new RuntimeException('Execute failed');
            }
            $result = $this->statement->fetchAll();
        }catch (\Throwable $th) {
                var_dump($th->getMessage());
        }

        if (!$this->inTransaction) {
            $this->pool->put($this->connection);
        }

        return $result ?? '';
    }

    public function setSql($val)
    {
        $this->setProperty('sql', $val);
    }

    protected function getSql()
    {
        return $this->properties['sql'];
    }
}