<?php

namespace eazy\http\di;

use eazy\base\BaseObject;
use eazy\http\exceptions\InvalidConfigException;
use eazy\http\Request;
use Psr\Container\ContainerInterface;

/**
 * Simple container.
 */
class Container extends BaseObject implements ContainerInterface
{
    /**
     * @var \eazy\http\di\Container
     */
    public static $instance;
    
    /**
     * @var array Singleton objects.
     */
    private array $_singletons = [];
    
    protected function init()
    {
        self::$instance = $this;
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Set container singleton.
     * `Container::set('classname', [
     *      'foo' => 'bar',
     * ]);`
     *
     * `Container::set([
     *      'class' => classname
     *      'foo' => 'bar',
     * ]);`
     *
     * @param  array  $definition
     * @param  array  $params
     *
     * @return $this
     * @throws \eazy\http\exceptions\InvalidConfigException
     */
    public function set($class, $definition = [])
    {
        $definition = $this->normalizeDefinition($class, $definition);
        $this->build($class, $definition);
        $this->_singletons[$class] = $this->build($class, $definition);
    }

    /**
     * Get singleton.
     * @param  string  $class
     * @param  array  $params
     * @param  array  $config
     *
     * @return mixed|void
     */
    public function get($class, $params = [], $config = [])
    {
        if (isset($this->_singletons[$class])) {
            // singleton
            return $this->_singletons[$class];
        }
    }

    /**
     * Build object.
     * @param $class
     * @param $params
     *
     * @return object|void
     * @throws \ReflectionException
     */
    protected function build($class, $params)
    {
        if(is_array($type) && isset($type['class'])) {
            $params = $type;
            $type = $params['class'];
            unset($params['class']);
        }

        if (is_string($type)) {
            $ref = new \ReflectionClass($type);
            return $ref->newInstanceArgs([$params]);
        }
    }

    /**
     * Normalize definition.
     * @param $class
     * @param $definition
     *
     * @return array|void
     * @throws \eazy\http\exceptions\InvalidConfigException
     */
    protected function normalizeDefinition($class, $definition)
    {
        if (is_array($definition)) {
            if (!isset($definition['class'])) {
                if (strpos($class, '\\') !== false) {
                    $definition['class'] = $class;
                } else {
                    throw new InvalidConfigException('A class definition requires a "class" member.');
                }
            }
            return $definition;
        }
    }
}